// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package http

import (
	"context"

	"github.com/enson89/user-service-go/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function for the type MockUserService
func (_mock *MockUserService) DeleteUser(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(ctx context.Context, id int64)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(err error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetProfile provides a mock function for the type MockUserService
func (_mock *MockUserService) GetProfile(ctx context.Context, id int64) (*model.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*model.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfile'
type MockUserService_GetProfile_Call struct {
	*mock.Call
}

// GetProfile is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) GetProfile(ctx interface{}, id interface{}) *MockUserService_GetProfile_Call {
	return &MockUserService_GetProfile_Call{Call: _e.mock.On("GetProfile", ctx, id)}
}

func (_c *MockUserService_GetProfile_Call) Run(run func(ctx context.Context, id int64)) *MockUserService_GetProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserService_GetProfile_Call) Return(user *model.User, err error) *MockUserService_GetProfile_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetProfile_Call) RunAndReturn(run func(ctx context.Context, id int64) (*model.User, error)) *MockUserService_GetProfile_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockUserService
func (_mock *MockUserService) Login(ctx context.Context, email string, password string) (string, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - email
//   - password
func (_e *MockUserService_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, email string, password string)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(s string, err error) *MockUserService_Login_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (string, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function for the type MockUserService
func (_mock *MockUserService) SignUp(ctx context.Context, email string, password string) (*model.User, error) {
	ret := _mock.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return returnFunc(ctx, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = returnFunc(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockUserService_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx
//   - email
//   - password
func (_e *MockUserService_Expecter) SignUp(ctx interface{}, email interface{}, password interface{}) *MockUserService_SignUp_Call {
	return &MockUserService_SignUp_Call{Call: _e.mock.On("SignUp", ctx, email, password)}
}

func (_c *MockUserService_SignUp_Call) Run(run func(ctx context.Context, email string, password string)) *MockUserService_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_SignUp_Call) Return(user *model.User, err error) *MockUserService_SignUp_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_SignUp_Call) RunAndReturn(run func(ctx context.Context, email string, password string) (*model.User, error)) *MockUserService_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) UpdateUser(ctx context.Context, id int64, newName string) (*model.User, error) {
	ret := _mock.Called(ctx, id, newName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) (*model.User, error)); ok {
		return returnFunc(ctx, id, newName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) *model.User); ok {
		r0 = returnFunc(ctx, id, newName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = returnFunc(ctx, id, newName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx
//   - id
//   - newName
func (_e *MockUserService_Expecter) UpdateUser(ctx interface{}, id interface{}, newName interface{}) *MockUserService_UpdateUser_Call {
	return &MockUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, newName)}
}

func (_c *MockUserService_UpdateUser_Call) Run(run func(ctx context.Context, id int64, newName string)) *MockUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_UpdateUser_Call) Return(user *model.User, err error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, id int64, newName string) (*model.User, error)) *MockUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
