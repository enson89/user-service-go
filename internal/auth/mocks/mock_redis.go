// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

type MockSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStore) EXPECT() *MockSessionStore_Expecter {
	return &MockSessionStore_Expecter{mock: &_m.Mock}
}

// BlacklistToken provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) BlacklistToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for BlacklistToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionStore_BlacklistToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlacklistToken'
type MockSessionStore_BlacklistToken_Call struct {
	*mock.Call
}

// BlacklistToken is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockSessionStore_Expecter) BlacklistToken(ctx interface{}, token interface{}) *MockSessionStore_BlacklistToken_Call {
	return &MockSessionStore_BlacklistToken_Call{Call: _e.mock.On("BlacklistToken", ctx, token)}
}

func (_c *MockSessionStore_BlacklistToken_Call) Run(run func(ctx context.Context, token string)) *MockSessionStore_BlacklistToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionStore_BlacklistToken_Call) Return(err error) *MockSessionStore_BlacklistToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionStore_BlacklistToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockSessionStore_BlacklistToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsBlacklisted provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) IsBlacklisted(ctx context.Context, token string) (bool, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsBlacklisted")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_IsBlacklisted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBlacklisted'
type MockSessionStore_IsBlacklisted_Call struct {
	*mock.Call
}

// IsBlacklisted is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockSessionStore_Expecter) IsBlacklisted(ctx interface{}, token interface{}) *MockSessionStore_IsBlacklisted_Call {
	return &MockSessionStore_IsBlacklisted_Call{Call: _e.mock.On("IsBlacklisted", ctx, token)}
}

func (_c *MockSessionStore_IsBlacklisted_Call) Run(run func(ctx context.Context, token string)) *MockSessionStore_IsBlacklisted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionStore_IsBlacklisted_Call) Return(b bool, err error) *MockSessionStore_IsBlacklisted_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSessionStore_IsBlacklisted_Call) RunAndReturn(run func(ctx context.Context, token string) (bool, error)) *MockSessionStore_IsBlacklisted_Call {
	_c.Call.Return(run)
	return _c
}
