name: CI Pipeline

on:
  push:
    branches:
      - main

env:
  GO_VERSION: '1.24'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  CACHE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.AWS_ECR_REPOSITORY }}:cache

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ hashFiles('**/go.sum') }}

      - name: Run linters
        uses: golangci/golangci-lint-action@v7

  vuln:
    name: Vulnerability scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ hashFiles('**/go.sum') }}

      - name: govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: ${{ env.GO_VERSION }}
          go-package: './...'

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    needs: [lint, vuln]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go build & test cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.tool_cache }}/go-build
            ${{ env.GOCACHE }}
          key: go-build-test-${{ hashFiles('**/*.go') }}

      - name: Static analysis
        run: go vet ./...

      - name: Run tests (exclude mocks)
        run: |
          PKGS=$(go list ./... | grep -v '/mocks')
          go test $PKGS -coverprofile=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  build-and-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag & push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx build \
            --push \
            --cache-from=type=registry,ref=$CACHE_IMAGE \
            --cache-to=type=registry,ref=$CACHE_IMAGE,mode=max \
            -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .